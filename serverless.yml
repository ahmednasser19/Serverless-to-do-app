service: serverless-todo-app
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"

  region:
    "us-east-1"
    # Replace the region here with your own
  # Set permission for our functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:* # Perform all database actions (create/update/delete)
      Resource:
        - arn:aws:dynamodb:us-east-1:541478060575:table/TodoApiTable # Replace with your table unique identefier (ARN). It's found on AWS and check your table details

# Add function handlers
functions:
  createTodo:
    handler: src/handlers/createTodo.handler
    events:
      - httpApi:
          path: /
          method: post
  fetchTodos:
    handler: src/handlers/getTodos.handler
    events:
      - httpApi:
          path: /todos
          method: get

resources:
  Resources:
    TodoAPI: # We set the resource name: here we use TodoAPI as the name
      Type: AWS::DynamoDB::Table # Type of resource we are provisioning, in this case, a DynamoDB Table
      Properties: # The properties for the resource
        TableName: TodoApiTable # Here we set the table name to "TodoApiTable
        BillingMode: PAY_PER_REQUEST # The billing mode is set here
        AttributeDefinitions: # Represents an attribute for describing the key schema for the table and indexes.
          - AttributeName: id # An ID to Identify each record in a unique way
            AttributeType: S # The attribute is of type String, hence the S
        KeySchema: # Specifies the attributes that make up the primary key for a table or an index
          - AttributeName: id # The name of the key attribute
            KeyType: HASH # The ID as the key

